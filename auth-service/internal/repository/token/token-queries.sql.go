// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token-queries.sql

package token

import (
	"context"
	"time"
)

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
delete from refresh_tokens where id = ?
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, id)
	return err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
select id, user_id, hashed_token, expires_at, revoked, created_at
from refresh_tokens
where user_id = ?
and revoked = false
and expires_at > current_timestamp
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID string) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.HashedToken,
			&i.ExpiresAt,
			&i.Revoked,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const invalidateRefreshTokenByID = `-- name: InvalidateRefreshTokenByID :exec
update refresh_tokens
set revoked = true
where id = ?
`

func (q *Queries) InvalidateRefreshTokenByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, invalidateRefreshTokenByID, id)
	return err
}

const registerRefreshToken = `-- name: RegisterRefreshToken :exec
insert into refresh_tokens (user_id, hashed_token, expires_at)
values (?, ?, ?)
`

type RegisterRefreshTokenParams struct {
	UserID      string
	HashedToken string
	ExpiresAt   time.Time
}

func (q *Queries) RegisterRefreshToken(ctx context.Context, arg RegisterRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, registerRefreshToken, arg.UserID, arg.HashedToken, arg.ExpiresAt)
	return err
}
