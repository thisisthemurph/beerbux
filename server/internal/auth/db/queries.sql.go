// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (name, username, email, hashed_password)
values ($1, $2, $3, $4)
returning id, username, email, name, hashed_password, update_hashed_password, password_update_requested_at, password_update_otp, password_last_updated_at, created_at, updated_at
`

type CreateUserParams struct {
	Name           string
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.UpdateHashedPassword,
		&i.PasswordUpdateRequestedAt,
		&i.PasswordUpdateOtp,
		&i.PasswordLastUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
delete from refresh_tokens where id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRefreshToken, id)
	return err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
select id, user_id, hashed_token, expires_at, revoked, created_at, updated_at
from refresh_tokens
where user_id = $1
  and revoked = false
  and expires_at > now()
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.HashedToken,
			&i.ExpiresAt,
			&i.Revoked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select id, username, email, name, hashed_password, update_hashed_password, password_update_requested_at, password_update_otp, password_last_updated_at, created_at, updated_at from users where id = $1 limit 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.UpdateHashedPassword,
		&i.PasswordUpdateRequestedAt,
		&i.PasswordUpdateOtp,
		&i.PasswordLastUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, username, email, name, hashed_password, update_hashed_password, password_update_requested_at, password_update_otp, password_last_updated_at, created_at, updated_at from users where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.UpdateHashedPassword,
		&i.PasswordUpdateRequestedAt,
		&i.PasswordUpdateOtp,
		&i.PasswordLastUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, username, email, name, hashed_password, update_hashed_password, password_update_requested_at, password_update_otp, password_last_updated_at, created_at, updated_at from users where username = $1 limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.HashedPassword,
		&i.UpdateHashedPassword,
		&i.PasswordUpdateRequestedAt,
		&i.PasswordUpdateOtp,
		&i.PasswordLastUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const initializePasswordReset = `-- name: InitializePasswordReset :exec
update users
set update_hashed_password = $2,
    password_update_otp = $3,
    password_update_requested_at = now()
where id = $1
`

type InitializePasswordResetParams struct {
	ID                   uuid.UUID
	UpdateHashedPassword sql.NullString
	PasswordUpdateOtp    sql.NullString
}

func (q *Queries) InitializePasswordReset(ctx context.Context, arg InitializePasswordResetParams) error {
	_, err := q.db.ExecContext(ctx, initializePasswordReset, arg.ID, arg.UpdateHashedPassword, arg.PasswordUpdateOtp)
	return err
}

const invalidateRefreshToken = `-- name: InvalidateRefreshToken :exec
update refresh_tokens
set revoked = true
where id = $1
`

func (q *Queries) InvalidateRefreshToken(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, invalidateRefreshToken, id)
	return err
}

const registerRefreshToken = `-- name: RegisterRefreshToken :exec
insert into refresh_tokens (user_id, hashed_token, expires_at)
values ($1, $2, $3)
`

type RegisterRefreshTokenParams struct {
	UserID      uuid.UUID
	HashedToken string
	ExpiresAt   time.Time
}

func (q *Queries) RegisterRefreshToken(ctx context.Context, arg RegisterRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, registerRefreshToken, arg.UserID, arg.HashedToken, arg.ExpiresAt)
	return err
}

const resetPassword = `-- name: ResetPassword :exec
with updated as (
    select id, update_hashed_password
    from users updated_users
    where updated_users.id = $1 and updated_users.password_update_requested_at is not null
)
update users u
set
    hashed_password = updated.update_hashed_password,
    update_hashed_password = null,
    password_update_otp = null,
    password_update_requested_at = null,
    password_last_updated_at = now()
from updated
where u.id = updated.id
`

func (q *Queries) ResetPassword(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, resetPassword, id)
	return err
}

const userWithUsernameExists = `-- name: UserWithUsernameExists :one
select exists(select 1 from users where username = $1)
`

func (q *Queries) UserWithUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userWithUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
