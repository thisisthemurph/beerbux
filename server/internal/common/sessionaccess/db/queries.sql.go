// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getSessionByID = `-- name: GetSessionByID :one
select s.id, s.name, s.is_active, s.created_at, s.updated_at, coalesce(sum(l.amount), 0)::float8 as total
from sessions s
         left join session_transactions t on s.id = t.session_id
         left join session_transaction_lines l on t.id = l.transaction_id
where s.id = $1::uuid
group by s.id, s.name, s.is_active, s.created_at, s.updated_at
`

type GetSessionByIDRow struct {
	ID        uuid.UUID
	Name      string
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
	Total     float64
}

func (q *Queries) GetSessionByID(ctx context.Context, sessionID uuid.UUID) (GetSessionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, sessionID)
	var i GetSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Total,
	)
	return i, err
}

const getSessionMember = `-- name: GetSessionMember :one
select u.id, u.username, u.email, u.name, u.created_at, u.updated_at, sm.is_admin, sm.is_deleted
from users u
join session_members sm on u.id = sm.member_id
where sm.session_id = $1 and sm.member_id = $2
limit 1
`

type GetSessionMemberParams struct {
	SessionID uuid.UUID
	MemberID  uuid.UUID
}

type GetSessionMemberRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsAdmin   bool
	IsDeleted bool
}

func (q *Queries) GetSessionMember(ctx context.Context, arg GetSessionMemberParams) (GetSessionMemberRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionMember, arg.SessionID, arg.MemberID)
	var i GetSessionMemberRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
		&i.IsDeleted,
	)
	return i, err
}

const getSessionTransactionLines = `-- name: GetSessionTransactionLines :many
select
    t.id as transaction_id,
    t.session_id,
    t.member_id as creator_id,
    t.created_at,
    tl.member_id,
    tl.amount::float8 as amount
from session_transactions t
join session_transaction_lines tl on t.id = tl.transaction_id
where t.session_id = $1
`

type GetSessionTransactionLinesRow struct {
	TransactionID uuid.UUID
	SessionID     uuid.UUID
	CreatorID     uuid.UUID
	CreatedAt     time.Time
	MemberID      uuid.UUID
	Amount        float64
}

func (q *Queries) GetSessionTransactionLines(ctx context.Context, sessionID uuid.UUID) ([]GetSessionTransactionLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessionTransactionLines, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionTransactionLinesRow
	for rows.Next() {
		var i GetSessionTransactionLinesRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.SessionID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.MemberID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionMembers = `-- name: ListSessionMembers :many
select u.id, u.username, u.email, u.name, u.created_at, u.updated_at, sm.is_admin, sm.is_deleted
from users u
join session_members sm on u.id = sm.member_id
where sm.session_id = $1
`

type ListSessionMembersRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsAdmin   bool
	IsDeleted bool
}

func (q *Queries) ListSessionMembers(ctx context.Context, sessionID uuid.UUID) ([]ListSessionMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionMembers, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionMembersRow
	for rows.Next() {
		var i ListSessionMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
