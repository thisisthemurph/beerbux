// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getFriends = `-- name: GetFriends :many
select u.id, u.name, u.username, count(distinct sm.session_id) as shared_session_count
from session_members sm
    join session_members sm2 on sm.session_id = sm2.session_id
    join users u on u.id = sm.member_id
where sm2.member_id = $1
    and sm.member_id != $1
group by u.id, u.username
order by shared_session_count desc, u.username
`

type GetFriendsRow struct {
	ID                 uuid.UUID
	Name               string
	Username           string
	SharedSessionCount int64
}

func (q *Queries) GetFriends(ctx context.Context, memberID uuid.UUID) ([]GetFriendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsRow
	for rows.Next() {
		var i GetFriendsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.SharedSessionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
