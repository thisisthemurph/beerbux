// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getFriends = `-- name: GetFriends :many
select u.id, u.name, u.username, count(distinct sm.session_id) as shared_session_count
from session_members sm
    join session_members sm2 on sm.session_id = sm2.session_id
    join users u on u.id = sm.member_id
where sm2.member_id = $1 and sm.member_id != $1
group by u.id, u.username
order by shared_session_count desc, u.username
`

type GetFriendsRow struct {
	ID                 uuid.UUID
	Name               string
	Username           string
	SharedSessionCount int64
}

// GetFriends returns the members that the provided member has sessions in common with.
// The results include any sessions in which either of the members are deleted.
func (q *Queries) GetFriends(ctx context.Context, memberID uuid.UUID) ([]GetFriendsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFriends, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFriendsRow
	for rows.Next() {
		var i GetFriendsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.SharedSessionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJointSessionIDs = `-- name: GetJointSessionIDs :many
select sm.session_id
from session_members sm
where sm.is_deleted = false
    and (sm.member_id = $1::uuid
        or sm.member_id = $2::uuid)
group by sm.session_id
having count(distinct sm.member_id) = 2
`

type GetJointSessionIDsParams struct {
	MemberID      uuid.UUID
	OtherMemberID uuid.UUID
}

// GetJointSessionIDs returns the set of session IDs that both users are members of.
// If a user is a deleted member of a session, this session will not be returned.
func (q *Queries) GetJointSessionIDs(ctx context.Context, arg GetJointSessionIDsParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getJointSessionIDs, arg.MemberID, arg.OtherMemberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var session_id uuid.UUID
		if err := rows.Scan(&session_id); err != nil {
			return nil, err
		}
		items = append(items, session_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const membersAreFriends = `-- name: MembersAreFriends :one
with joint_sessions as (
    select sm.session_id
    from session_members sm
    where sm.member_id = $1::uuid
       or sm.member_id = $2::uuid
    group by sm.session_id
    having count(distinct sm.member_id) = 2
)
select exists(select 1 from joint_sessions) as members_are_friends
`

type MembersAreFriendsParams struct {
	MemberID      uuid.UUID
	OtherMemberID uuid.UUID
}

// MembersAreFriends returns a boolean indicating if the provided members have any sessions in common.
// This includes any sessions in which either of the members have been deleted from the session.
func (q *Queries) MembersAreFriends(ctx context.Context, arg MembersAreFriendsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, membersAreFriends, arg.MemberID, arg.OtherMemberID)
	var members_are_friends bool
	err := row.Scan(&members_are_friends)
	return members_are_friends, err
}
