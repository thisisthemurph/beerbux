// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package session

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const exists = `-- name: Exists :one
select exists(select 1 from sessions where id = $1)
`

func (q *Queries) Exists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, exists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const get = `-- name: Get :one
select s.id, s.name, s.is_active, s.created_at, s.updated_at, coalesce(sum(l.amount), 0)::float8 as total
from sessions s
left join session_transactions t on s.id = t.session_id
left join session_transaction_lines l on t.id = l.transaction_id
where s.id = $1
group by s.id, s.name, s.is_active, s.created_at, s.updated_at
`

type GetRow struct {
	ID        uuid.UUID
	Name      string
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
	Total     float64
}

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (GetRow, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i GetRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Total,
	)
	return i, err
}

const listSessionsForUser = `-- name: ListSessionsForUser :many
with paged_sessions as (
    select
        s.id,
        s.name,
        s.is_active,
        s.created_at,
        s.updated_at,
        coalesce(sum(tl.amount), 0)::float8 as total_amount
    from sessions s
             join session_members sm_target on s.id = sm_target.session_id
             left join session_transactions t on s.id = t.session_id
             left join session_transaction_lines tl on t.id = tl.transaction_id
    where sm_target.member_id = $1
      and sm_target.is_deleted = false
    group by s.id, s.name, s.is_active, s.created_at, s.updated_at
    order by s.updated_at desc, s.id desc
    limit nullif($2, 0)
)
select
    st.id, st.name, st.is_active, st.created_at, st.updated_at, st.total_amount,
    m.id as member_id,
    m.name as member_name,
    m.username as member_username
from paged_sessions st
join session_members sm on st.id = sm.session_id
join users m on sm.member_id = m.id
order by st.updated_at desc, st.id desc
`

type ListSessionsForUserParams struct {
	MemberID uuid.UUID
	Column2  interface{}
}

type ListSessionsForUserRow struct {
	ID             uuid.UUID
	Name           string
	IsActive       bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	TotalAmount    float64
	MemberID       uuid.UUID
	MemberName     string
	MemberUsername string
}

func (q *Queries) ListSessionsForUser(ctx context.Context, arg ListSessionsForUserParams) ([]ListSessionsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsForUser, arg.MemberID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionsForUserRow
	for rows.Next() {
		var i ListSessionsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalAmount,
			&i.MemberID,
			&i.MemberName,
			&i.MemberUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
