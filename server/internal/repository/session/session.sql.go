// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package session

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addMember = `-- name: AddMember :exec
insert into session_members (session_id, member_id, is_admin)
values ($1, $2, $3)
on conflict(session_id, member_id) do nothing
`

type AddMemberParams struct {
	SessionID uuid.UUID
	MemberID  uuid.UUID
	IsAdmin   bool
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) error {
	_, err := q.db.ExecContext(ctx, addMember, arg.SessionID, arg.MemberID, arg.IsAdmin)
	return err
}

const countAdminMembers = `-- name: CountAdminMembers :one
select count(*) from session_members where session_id = $1 and is_admin = true
`

func (q *Queries) CountAdminMembers(ctx context.Context, sessionID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAdminMembers, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMembers = `-- name: CountMembers :one
select count(*) from session_members where session_id = $1 and is_deleted = false
`

func (q *Queries) CountMembers(ctx context.Context, sessionID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMembers, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMembersIncludingDeleted = `-- name: CountMembersIncludingDeleted :one
select count(*) from session_members where session_id = $1
`

func (q *Queries) CountMembersIncludingDeleted(ctx context.Context, sessionID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countMembersIncludingDeleted, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
insert into sessions (name, creator_id) values ($1, $2) returning id, name, is_active, creator_id, created_at, updated_at
`

type CreateParams struct {
	Name      string
	CreatorID uuid.UUID
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, create, arg.Name, arg.CreatorID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
update session_members
set is_deleted = true, is_admin = false
where session_id = $1 and member_id = $2
`

type DeleteMemberParams struct {
	SessionID uuid.UUID
	MemberID  uuid.UUID
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteMember, arg.SessionID, arg.MemberID)
	return err
}

const exists = `-- name: Exists :one
select exists(select 1 from sessions where id = $1)
`

func (q *Queries) Exists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, exists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const get = `-- name: Get :one
select s.id, s.name, s.is_active, s.created_at, s.updated_at, coalesce(sum(l.amount), 0)::float8 as total
from sessions s
left join session_transactions t on s.id = t.session_id
left join session_transaction_lines l on t.id = l.transaction_id
where s.id = $1
group by s.id, s.name, s.is_active, s.created_at, s.updated_at
`

type GetRow struct {
	ID        uuid.UUID
	Name      string
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
	Total     float64
}

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (GetRow, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i GetRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Total,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
select u.id, u.username, u.name, u.created_at, u.updated_at, sm.is_admin
from users u
join session_members sm on u.id = sm.member_id
where sm.session_id = $1 and u.id = $2
`

type GetMemberParams struct {
	SessionID uuid.UUID
	ID        uuid.UUID
}

type GetMemberRow struct {
	ID        uuid.UUID
	Username  string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsAdmin   bool
}

func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (GetMemberRow, error) {
	row := q.db.QueryRowContext(ctx, getMember, arg.SessionID, arg.ID)
	var i GetMemberRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdmin,
	)
	return i, err
}

const getTransactionLines = `-- name: GetTransactionLines :many
select
    t.id as transaction_id,
    t.session_id,
    t.member_id as creator_id,
    t.created_at,
    tl.member_id,
    tl.amount
from session_transactions t
join session_transaction_lines tl on t.id = tl.transaction_id
where t.session_id = $1
`

type GetTransactionLinesRow struct {
	TransactionID uuid.UUID
	SessionID     uuid.UUID
	CreatorID     uuid.UUID
	CreatedAt     time.Time
	MemberID      uuid.UUID
	Amount        string
}

func (q *Queries) GetTransactionLines(ctx context.Context, sessionID uuid.UUID) ([]GetTransactionLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionLines, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionLinesRow
	for rows.Next() {
		var i GetTransactionLinesRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.SessionID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.MemberID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listForUser = `-- name: ListForUser :many
with paged_sessions as (
    select
        s.id,
        s.name,
        s.is_active,
        s.created_at,
        s.updated_at,
        coalesce(sum(tl.amount), 0)::float8 as total_amount
    from sessions s
             join session_members sm_target on s.id = sm_target.session_id
             left join session_transactions t on s.id = t.session_id
             left join session_transaction_lines tl on t.id = tl.transaction_id
    where sm_target.member_id = $1
      and sm_target.is_deleted = false
    group by s.id, s.name, s.is_active, s.created_at, s.updated_at
    order by s.updated_at desc, s.id desc
    limit nullif($2, 0)
)
select
    st.id, st.name, st.is_active, st.created_at, st.updated_at, st.total_amount,
    m.id as member_id,
    m.name as member_name,
    m.username as member_username
from paged_sessions st
join session_members sm on st.id = sm.session_id
join users m on sm.member_id = m.id
order by st.updated_at desc, st.id desc
`

type ListForUserParams struct {
	MemberID uuid.UUID
	Column2  interface{}
}

type ListForUserRow struct {
	ID             uuid.UUID
	Name           string
	IsActive       bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	TotalAmount    float64
	MemberID       uuid.UUID
	MemberName     string
	MemberUsername string
}

func (q *Queries) ListForUser(ctx context.Context, arg ListForUserParams) ([]ListForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listForUser, arg.MemberID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListForUserRow
	for rows.Next() {
		var i ListForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalAmount,
			&i.MemberID,
			&i.MemberName,
			&i.MemberUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembers = `-- name: ListMembers :many
select u.id, u.username, u.name, u.created_at, u.updated_at, sm.is_admin
from users u
join session_members sm on u.id = sm.member_id
where sm.session_id = $1
`

type ListMembersRow struct {
	ID        uuid.UUID
	Username  string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsAdmin   bool
}

func (q *Queries) ListMembers(ctx context.Context, sessionID uuid.UUID) ([]ListMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listMembers, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembersRow
	for rows.Next() {
		var i ListMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUpdatedNow = `-- name: SetUpdatedNow :exec
update sessions set updated_at = now() where id = $1
`

func (q *Queries) SetUpdatedNow(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, setUpdatedNow, id)
	return err
}

const updateActiveState = `-- name: UpdateActiveState :exec
update sessions set is_active = $2 where id = $1
`

type UpdateActiveStateParams struct {
	ID       uuid.UUID
	IsActive bool
}

func (q *Queries) UpdateActiveState(ctx context.Context, arg UpdateActiveStateParams) error {
	_, err := q.db.ExecContext(ctx, updateActiveState, arg.ID, arg.IsActive)
	return err
}

const updateMemberAdminState = `-- name: UpdateMemberAdminState :exec
update session_members
set is_admin = $3
where session_id = $1 and member_id = $2
`

type UpdateMemberAdminStateParams struct {
	SessionID uuid.UUID
	MemberID  uuid.UUID
	IsAdmin   bool
}

func (q *Queries) UpdateMemberAdminState(ctx context.Context, arg UpdateMemberAdminStateParams) error {
	_, err := q.db.ExecContext(ctx, updateMemberAdminState, arg.SessionID, arg.MemberID, arg.IsAdmin)
	return err
}
