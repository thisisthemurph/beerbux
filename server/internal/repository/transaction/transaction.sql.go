// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package transaction

import (
	"context"

	"github.com/google/uuid"
)

const addTransaction = `-- name: AddTransaction :one
insert into session_transactions (id, session_id, member_id)
values ($1, $2, $3)
on conflict do nothing
returning id, session_id, member_id, created_at
`

type AddTransactionParams struct {
	ID        uuid.UUID
	SessionID uuid.UUID
	MemberID  uuid.UUID
}

func (q *Queries) AddTransaction(ctx context.Context, arg AddTransactionParams) (SessionTransaction, error) {
	row := q.db.QueryRowContext(ctx, addTransaction, arg.ID, arg.SessionID, arg.MemberID)
	var i SessionTransaction
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.MemberID,
		&i.CreatedAt,
	)
	return i, err
}

const addTransactionLine = `-- name: AddTransactionLine :one
insert into session_transaction_lines (transaction_id, member_id, amount)
values ($1, $2, $3)
on conflict (transaction_id, member_id)
do update set amount = excluded.amount
returning transaction_id, member_id, amount
`

type AddTransactionLineParams struct {
	TransactionID uuid.UUID
	MemberID      uuid.UUID
	Amount        string
}

func (q *Queries) AddTransactionLine(ctx context.Context, arg AddTransactionLineParams) (SessionTransactionLine, error) {
	row := q.db.QueryRowContext(ctx, addTransactionLine, arg.TransactionID, arg.MemberID, arg.Amount)
	var i SessionTransactionLine
	err := row.Scan(&i.TransactionID, &i.MemberID, &i.Amount)
	return i, err
}
