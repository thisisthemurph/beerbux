// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createLedgerEntry = `-- name: CreateLedgerEntry :exec
insert into ledger (transaction_id, user_id, amount) values ($1, $2, $3)
`

type CreateLedgerEntryParams struct {
	TransactionID uuid.UUID
	UserID        uuid.UUID
	Amount        float64
}

func (q *Queries) CreateLedgerEntry(ctx context.Context, arg CreateLedgerEntryParams) error {
	_, err := q.db.ExecContext(ctx, createLedgerEntry, arg.TransactionID, arg.UserID, arg.Amount)
	return err
}

const createTransaction = `-- name: CreateTransaction :one
insert into session_transactions (session_id, member_id)
values ($1, $2)
on conflict do nothing
returning id, session_id, member_id, created_at
`

type CreateTransactionParams struct {
	SessionID uuid.UUID
	MemberID  uuid.UUID
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (SessionTransaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.SessionID, arg.MemberID)
	var i SessionTransaction
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.MemberID,
		&i.CreatedAt,
	)
	return i, err
}

const createTransactionLine = `-- name: CreateTransactionLine :one
insert into session_transaction_lines (transaction_id, member_id, amount)
values ($1, $2, $3)
on conflict (transaction_id, member_id)
do update set amount = excluded.amount
returning transaction_id, member_id, amount
`

type CreateTransactionLineParams struct {
	TransactionID uuid.UUID
	MemberID      uuid.UUID
	Amount        float64
}

func (q *Queries) CreateTransactionLine(ctx context.Context, arg CreateTransactionLineParams) (SessionTransactionLine, error) {
	row := q.db.QueryRowContext(ctx, createTransactionLine, arg.TransactionID, arg.MemberID, arg.Amount)
	var i SessionTransactionLine
	err := row.Scan(&i.TransactionID, &i.MemberID, &i.Amount)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
select s.id, s.name, s.is_active, s.created_at, s.updated_at
from sessions s
where s.id = $1
`

type GetSessionByIDRow struct {
	ID        uuid.UUID
	Name      string
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetSessionByID(ctx context.Context, id uuid.UUID) (GetSessionByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, id)
	var i GetSessionByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionMemberIDs = `-- name: GetSessionMemberIDs :many
select member_id
from session_members
where session_id = $1 and is_deleted = false
`

func (q *Queries) GetSessionMemberIDs(ctx context.Context, sessionID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getSessionMemberIDs, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var member_id uuid.UUID
		if err := rows.Scan(&member_id); err != nil {
			return nil, err
		}
		items = append(items, member_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
