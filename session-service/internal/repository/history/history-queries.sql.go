// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: history-queries.sql

package history

import (
	"context"
)

const createSessionHistory = `-- name: CreateSessionHistory :exec
insert into session_history (session_id, member_id, event_type, event_data)
values (?, ?, ?, ?)
`

type CreateSessionHistoryParams struct {
	SessionID string
	MemberID  string
	EventType string
	EventData []byte
}

func (q *Queries) CreateSessionHistory(ctx context.Context, arg CreateSessionHistoryParams) error {
	_, err := q.db.ExecContext(ctx, createSessionHistory,
		arg.SessionID,
		arg.MemberID,
		arg.EventType,
		arg.EventData,
	)
	return err
}

const getSessionHistory = `-- name: GetSessionHistory :many
select id, session_id, member_id, event_type, event_data, created_at from session_history where session_id = ?
`

func (q *Queries) GetSessionHistory(ctx context.Context, sessionID string) ([]SessionHistory, error) {
	rows, err := q.db.QueryContext(ctx, getSessionHistory, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionHistory
	for rows.Next() {
		var i SessionHistory
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.MemberID,
			&i.EventType,
			&i.EventData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
