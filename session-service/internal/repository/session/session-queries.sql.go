// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session-queries.sql

package session

import (
	"context"
	"time"
)

const addSessionMember = `-- name: AddSessionMember :exec
insert into session_members (session_id, member_id, is_owner, is_admin)
values (?, ?, ?, ?)
on conflict do nothing
`

type AddSessionMemberParams struct {
	SessionID string
	MemberID  string
	IsOwner   bool
	IsAdmin   bool
}

func (q *Queries) AddSessionMember(ctx context.Context, arg AddSessionMemberParams) error {
	_, err := q.db.ExecContext(ctx, addSessionMember,
		arg.SessionID,
		arg.MemberID,
		arg.IsOwner,
		arg.IsAdmin,
	)
	return err
}

const addTransaction = `-- name: AddTransaction :one
insert into transactions (id, session_id, member_id, created_at)
values (?, ?, ?, ?)
on conflict do nothing
returning id, session_id, member_id, created_at
`

type AddTransactionParams struct {
	ID        string
	SessionID string
	MemberID  string
	CreatedAt time.Time
}

func (q *Queries) AddTransaction(ctx context.Context, arg AddTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, addTransaction,
		arg.ID,
		arg.SessionID,
		arg.MemberID,
		arg.CreatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.MemberID,
		&i.CreatedAt,
	)
	return i, err
}

const addTransactionLine = `-- name: AddTransactionLine :one
insert into transaction_lines (transaction_id, member_id, amount)
values (?, ?, ?)
on conflict (transaction_id, member_id)
    do update set amount = excluded.amount
returning transaction_id, member_id, amount
`

type AddTransactionLineParams struct {
	TransactionID string
	MemberID      string
	Amount        float64
}

func (q *Queries) AddTransactionLine(ctx context.Context, arg AddTransactionLineParams) (TransactionLine, error) {
	row := q.db.QueryRowContext(ctx, addTransactionLine, arg.TransactionID, arg.MemberID, arg.Amount)
	var i TransactionLine
	err := row.Scan(&i.TransactionID, &i.MemberID, &i.Amount)
	return i, err
}

const countSessionAdmins = `-- name: CountSessionAdmins :one
select count(*) from session_members
where session_id = ? and is_admin = true
`

func (q *Queries) CountSessionAdmins(ctx context.Context, sessionID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSessionAdmins, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSessionMembers = `-- name: CountSessionMembers :one
select count(*) from session_members
where session_id = ?
`

func (q *Queries) CountSessionMembers(ctx context.Context, sessionID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSessionMembers, sessionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSession = `-- name: CreateSession :one
insert into sessions (id, name)
values (?, ?)
returning id, name, is_active, created_at, updated_at
`

type CreateSessionParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.Name)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSessionMember = `-- name: DeleteSessionMember :exec
update session_members
set is_deleted = true
where session_id = ? and member_id = ?
`

type DeleteSessionMemberParams struct {
	SessionID string
	MemberID  string
}

func (q *Queries) DeleteSessionMember(ctx context.Context, arg DeleteSessionMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteSessionMember, arg.SessionID, arg.MemberID)
	return err
}

const getMember = `-- name: GetMember :one
select id, name, username, created_at, updated_at from members where id = ? limit 1
`

func (q *Queries) GetMember(ctx context.Context, id string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
select s.id, s.name, s.is_active, s.created_at, s.updated_at, cast(coalesce(sum(l.amount), 0) as real) as total
from sessions s
left join transactions t on s.id = t.session_id
left join transaction_lines l on t.id = l.transaction_id
where s.id = ?
group by s.id, s.name, s.is_active, s.created_at, s.updated_at
`

type GetSessionRow struct {
	ID        string
	Name      string
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
	Total     float64
}

func (q *Queries) GetSession(ctx context.Context, id string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i GetSessionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Total,
	)
	return i, err
}

const getSessionMember = `-- name: GetSessionMember :one
select m.id, m.name, m.username, m.created_at, m.updated_at, sm.is_owner, sm.is_admin
from members m
join session_members sm on m.id = sm.member_id
where m.id = ? and sm.session_id = ?
`

type GetSessionMemberParams struct {
	ID        string
	SessionID string
}

type GetSessionMemberRow struct {
	ID        string
	Name      string
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsOwner   bool
	IsAdmin   bool
}

func (q *Queries) GetSessionMember(ctx context.Context, arg GetSessionMemberParams) (GetSessionMemberRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionMember, arg.ID, arg.SessionID)
	var i GetSessionMemberRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsOwner,
		&i.IsAdmin,
	)
	return i, err
}

const getSessionTransactionLines = `-- name: GetSessionTransactionLines :many
select
    t.id as transaction_id,
    t.session_id,
    t.member_id as creator_id,
    t.created_at,
    l.member_id,
    l.amount
from transactions t
join transaction_lines l on t.id = l.transaction_id
where t.session_id = ?
`

type GetSessionTransactionLinesRow struct {
	TransactionID string
	SessionID     string
	CreatorID     string
	CreatedAt     time.Time
	MemberID      string
	Amount        float64
}

func (q *Queries) GetSessionTransactionLines(ctx context.Context, sessionID string) ([]GetSessionTransactionLinesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSessionTransactionLines, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSessionTransactionLinesRow
	for rows.Next() {
		var i GetSessionTransactionLinesRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.SessionID,
			&i.CreatorID,
			&i.CreatedAt,
			&i.MemberID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionMembers = `-- name: ListSessionMembers :many
select m.id, m.name, m.username, m.created_at, m.updated_at, sm.is_owner, sm.is_admin, sm.is_deleted
from members m
join session_members sm on m.id = sm.member_id
where sm.session_id = ?
`

type ListSessionMembersRow struct {
	ID        string
	Name      string
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsOwner   bool
	IsAdmin   bool
	IsDeleted bool
}

func (q *Queries) ListSessionMembers(ctx context.Context, sessionID string) ([]ListSessionMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionMembers, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionMembersRow
	for rows.Next() {
		var i ListSessionMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsOwner,
			&i.IsAdmin,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionsForUser = `-- name: ListSessionsForUser :many
with paged_sessions AS (
    select s.id, s.name, s.is_active, s.created_at, s.updated_at, cast(coalesce(sum(l.amount), 0) as real) as total_amount
    from sessions s
    join session_members sm_target on s.id = sm_target.session_id
    left join transactions t on s.id = t.session_id
    left join transaction_lines l on t.id = l.transaction_id
    where sm_target.member_id = ?1
    group by s.id, s.name, s.is_active, s.created_at, s.updated_at
    order by s.updated_at desc, s.id desc
    limit case when ?2 = 0 then -1 else ?2 end
)
select
    ps.id, ps.name, ps.is_active, ps.created_at, ps.updated_at, ps.total_amount,
    m.id as member_id,
    m.name as member_name,
    m.username as member_username
from paged_sessions ps
join session_members sm on ps.id = sm.session_id
join members m on sm.member_id = m.id
order by ps.updated_at desc, ps.id desc
`

type ListSessionsForUserParams struct {
	MemberID string
	PageSize interface{}
}

type ListSessionsForUserRow struct {
	ID             string
	Name           string
	IsActive       bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	TotalAmount    float64
	MemberID       string
	MemberName     string
	MemberUsername string
}

func (q *Queries) ListSessionsForUser(ctx context.Context, arg ListSessionsForUserParams) ([]ListSessionsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsForUser, arg.MemberID, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionsForUserRow
	for rows.Next() {
		var i ListSessionsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalAmount,
			&i.MemberID,
			&i.MemberName,
			&i.MemberUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSessionUpdatedAtNow = `-- name: SetSessionUpdatedAtNow :exec
update sessions
set updated_at = current_timestamp
where id = ?
`

func (q *Queries) SetSessionUpdatedAtNow(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, setSessionUpdatedAtNow, id)
	return err
}

const updateMember = `-- name: UpdateMember :exec
update members
set name = ?,
    username = ?,
    updated_at = current_timestamp
where id = ?
`

type UpdateMemberParams struct {
	Name     string
	Username string
	ID       string
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateMember, arg.Name, arg.Username, arg.ID)
	return err
}

const updateSessionMemberAdmin = `-- name: UpdateSessionMemberAdmin :exec
update session_members
set is_admin = ?,
    updated_at = current_timestamp
where session_id = ?
    and member_id = ?
`

type UpdateSessionMemberAdminParams struct {
	IsAdmin   bool
	SessionID string
	MemberID  string
}

func (q *Queries) UpdateSessionMemberAdmin(ctx context.Context, arg UpdateSessionMemberAdminParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionMemberAdmin, arg.IsAdmin, arg.SessionID, arg.MemberID)
	return err
}

const upsertMember = `-- name: UpsertMember :exec
insert into members (id, name, username)
values (?, ?, ?)
on conflict(id) do update
set name = excluded.name,
    username = excluded.username,
    updated_at = current_timestamp
`

type UpsertMemberParams struct {
	ID       string
	Name     string
	Username string
}

func (q *Queries) UpsertMember(ctx context.Context, arg UpsertMemberParams) error {
	_, err := q.db.ExecContext(ctx, upsertMember, arg.ID, arg.Name, arg.Username)
	return err
}
