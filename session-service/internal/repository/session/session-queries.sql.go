// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session-queries.sql

package session

import (
	"context"
	"time"
)

const addSessionMember = `-- name: AddSessionMember :exec
insert into session_members (session_id, member_id, is_owner)
values (?, ?, ?)
on conflict do nothing
`

type AddSessionMemberParams struct {
	SessionID string
	MemberID  string
	IsOwner   bool
}

func (q *Queries) AddSessionMember(ctx context.Context, arg AddSessionMemberParams) error {
	_, err := q.db.ExecContext(ctx, addSessionMember, arg.SessionID, arg.MemberID, arg.IsOwner)
	return err
}

const createSession = `-- name: CreateSession :one
insert into sessions (id, name)
values (?, ?)
returning id, name, is_active, created_at, updated_at
`

type CreateSessionParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.Name)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
select id, name, username, created_at, updated_at from members where id = ? limit 1
`

func (q *Queries) GetMember(ctx context.Context, id string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
select id, name, is_active, created_at, updated_at from sessions where id = ? limit 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
select m.id, m.name, m.username, m.created_at, m.updated_at
from members m
join session_members sm on m.id = sm.member_id
where sm.session_id = ?
`

func (q *Queries) ListMembers(ctx context.Context, sessionID string) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, listMembers, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionsForUser = `-- name: ListSessionsForUser :many
select
    s.id, s.name, s.is_active, s.created_at, s.updated_at,
    m.id as member_id,
    m.name as member_name,
    m.username as member_username
from sessions s
join session_members sm_target on s.id = sm_target.session_id
join session_members sm on s.id = sm.session_id
join members m on sm.member_id = m.id
where sm_target.member_id = ?
`

type ListSessionsForUserRow struct {
	ID             string
	Name           string
	IsActive       bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	MemberID       string
	MemberName     string
	MemberUsername string
}

func (q *Queries) ListSessionsForUser(ctx context.Context, memberID string) ([]ListSessionsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listSessionsForUser, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSessionsForUserRow
	for rows.Next() {
		var i ListSessionsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MemberID,
			&i.MemberName,
			&i.MemberUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :exec
update members
set name = ?,
    username = ?,
    updated_at = current_timestamp
where id = ?
`

type UpdateMemberParams struct {
	Name     string
	Username string
	ID       string
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateMember, arg.Name, arg.Username, arg.ID)
	return err
}

const updateSession = `-- name: UpdateSession :one
update sessions
set name = ?,
    updated_at = current_timestamp
where id = ?
returning id, name, is_active, created_at, updated_at
`

type UpdateSessionParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.Name, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertMember = `-- name: UpsertMember :exec
insert into members (id, name, username)
values (?, ?, ?)
on conflict(id) do update
set name = excluded.name,
    username = excluded.username,
    updated_at = current_timestamp
`

type UpsertMemberParams struct {
	ID       string
	Name     string
	Username string
}

func (q *Queries) UpsertMember(ctx context.Context, arg UpsertMemberParams) error {
	_, err := q.db.ExecContext(ctx, upsertMember, arg.ID, arg.Name, arg.Username)
	return err
}
