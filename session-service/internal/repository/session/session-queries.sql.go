// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session-queries.sql

package session

import (
	"context"
)

const addMemberToSession = `-- name: AddMemberToSession :exec
insert into session_members (session_id, user_id)
values (?, ?)
`

type AddMemberToSessionParams struct {
	SessionID string
	UserID    string
}

func (q *Queries) AddMemberToSession(ctx context.Context, arg AddMemberToSessionParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToSession, arg.SessionID, arg.UserID)
	return err
}

const createSession = `-- name: CreateSession :one
insert into sessions (id, name, owner_id)
values (?, ?, ?)
returning id, name, owner_id, is_active, created_at, updated_at
`

type CreateSessionParams struct {
	ID      string
	Name    string
	OwnerID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.Name, arg.OwnerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
select id, name, owner_id, is_active, created_at, updated_at from sessions where id = ? limit 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
update sessions
set name = ?
where id = ?
returning id, name, owner_id, is_active, created_at, updated_at
`

type UpdateSessionParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.Name, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
