// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session-queries.sql

package session

import (
	"context"
)

const addSessionMember = `-- name: AddSessionMember :exec
insert into session_members (session_id, member_id, is_owner)
values (?, ?, ?)
on conflict do nothing
`

type AddSessionMemberParams struct {
	SessionID string
	MemberID  string
	IsOwner   bool
}

func (q *Queries) AddSessionMember(ctx context.Context, arg AddSessionMemberParams) error {
	_, err := q.db.ExecContext(ctx, addSessionMember, arg.SessionID, arg.MemberID, arg.IsOwner)
	return err
}

const createSession = `-- name: CreateSession :one
insert into sessions (id, name)
values (?, ?)
returning id, name, is_active, created_at, updated_at
`

type CreateSessionParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.Name)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
select id, name, is_active, created_at, updated_at from sessions where id = ? limit 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
update sessions
set name = ?
where id = ?
returning id, name, is_active, created_at, updated_at
`

type UpdateSessionParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession, arg.Name, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertMember = `-- name: UpsertMember :exec
insert into members (id, name, username)
values (?, ?, ?)
on conflict do nothing
`

type UpsertMemberParams struct {
	ID       string
	Name     string
	Username string
}

func (q *Queries) UpsertMember(ctx context.Context, arg UpsertMemberParams) error {
	_, err := q.db.ExecContext(ctx, upsertMember, arg.ID, arg.Name, arg.Username)
	return err
}
