// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user-queries.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
insert into users (id, name, username, bio) values (?, ?, ?, ?)
returning id, name, username, bio, credit, debit, net, created_at, updated_at
`

type CreateUserParams struct {
	ID       string
	Name     string
	Username string
	Bio      sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Bio,
		&i.Credit,
		&i.Debit,
		&i.Net,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, name, username, bio, credit, debit, net, created_at, updated_at from users where id = ? limit 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Bio,
		&i.Credit,
		&i.Debit,
		&i.Net,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select id, name, username, bio, credit, debit, net, created_at, updated_at from users where username = ? limit 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Bio,
		&i.Credit,
		&i.Debit,
		&i.Net,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set name = ?, username = ?, bio = ? where id = ?
returning id, name, username, bio, credit, debit, net, created_at, updated_at
`

type UpdateUserParams struct {
	Name     string
	Username string
	Bio      sql.NullString
	ID       string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Username,
		arg.Bio,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Bio,
		&i.Credit,
		&i.Debit,
		&i.Net,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserTotals = `-- name: UpdateUserTotals :exec
update users
set credit = ?, debit = ?, net = ?
where id = ?
`

type UpdateUserTotalsParams struct {
	Credit float64
	Debit  float64
	Net    float64
	ID     string
}

func (q *Queries) UpdateUserTotals(ctx context.Context, arg UpdateUserTotalsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTotals,
		arg.Credit,
		arg.Debit,
		arg.Net,
		arg.ID,
	)
	return err
}
